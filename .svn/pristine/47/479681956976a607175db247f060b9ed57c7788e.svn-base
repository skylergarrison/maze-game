package ui;

import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.Toast;
import falstad.Constants;
import falstad.Maze;
import falstad.MazeHolder;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.CheckBox;
import wsgarrison.ui.R;

/**
 * GeneratingActivity is the second screen of the maze program. It shows the user the progress of the generation
 * of the maze, lets them select a solver for the maze from manual, wizard, wallfollower, and curiousmouse.
 * Lets the user preselect whether or not the program's playstate displays the whole maze, the previously seen
 * walls, and or the solution to the maze.
 * 
 * Has a button to allow the user to move back to the main screen, and one to allow the user to play the game
 * once the maze is generated.
 * 
 * @author William S Garrison
 */
@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public class GeneratingActivity extends ActionBarActivity  implements OnItemSelectedListener{

	//declares local variables: progressbar, loading status, handler; manual, map, wallshow, solution show bools
	private ProgressBar genProgress;
    private int genProgressStatus = 0;
    public static Handler genHandler;
    boolean manual = true;
    boolean map = true;
    boolean walls = true;
    boolean solution = true;
    Maze maze;
	
    /**
	 * onCreate method that instantiates the activity and associated the proper layout.
	 * In GeneratingActivity, the spinner for the selection of the maze navigation is instantiated,
	 * the progressbar to show the progress of the maze generation is instantiated.
	 * 
	 * Currently the progressbar has a dummy thread to update the progressbar as if it's loading.
	 * 
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.generating_activity);
		
		Spinner spinner = (Spinner) findViewById(R.id.spinner2);
		spinner.setOnItemSelectedListener(this);
		
		maze = MazeHolder.getData();
		
		maze.incTest();
		Log.v("Test persistent maze", "Usage: " + maze.getTest());
		
		//associate the progressbar with the xml display id
		genProgress = (ProgressBar) findViewById(R.id.progressBar1);
	    genHandler = new Handler(){
			@Override
			public void handleMessage(Message msg) {
                // Act on the message
				genProgressStatus = msg.getData().getInt("prog"); 
				genProgress.setProgress(genProgressStatus);
            }
		};
		
		// create a thread for updating the progress bar
        Thread background = new Thread (new Runnable() {
           public void run() {
               try {
            	   createMaze();
               } catch (Exception e) {
                   // if something fails do something smart
               }
           }
        });
        
        background.start();
		
		/*new Thread(new Runnable() {
			public void run() {
		    	while(genProgressStatus < 100){
		    		genProgressStatus += 1;
		    		
				    //Update the bar on the XML display
				    genHandler.post(new Runnable() {
				    	public void run() {
				    		genProgress.setProgress(genProgressStatus); 
				    	}
				    });
			    	try {
			        	//Display progress slowly by sleeping 100ms
			    		Thread.sleep(100);
			        }catch (InterruptedException e) {
			           e.printStackTrace();
			        }
		    	}
			}
		}).start();*/
	}

	/**
	 * Creates a simple default menu.
	 */
	public void createMaze() {
		maze.init();
		maze.startBuild();
	}
	
	/**
	 * Creates a simple default menu.
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	/**
	 * Handles the simple menu.
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	/**
	 * Sends this activity to the next, which is PlayActivity.
	 * Only permits movement if the loading is done.
	 * 
	 * Send manual boolean to PlayActivity so it knows which controller to display.
	 */
	public void goNext(View view) {
		if(this.genProgressStatus>=100){
			Intent intent = new Intent(this, PlayActivity.class);
			intent.putExtra("manual", manual);
			startActivity(intent);
		}else{
			Context context = getApplicationContext();
			int duration = Toast.LENGTH_SHORT;

			Toast toast = Toast.makeText(context, "Not done generating.", duration);
			toast.show();
			
			Log.v("Gen Msg", "not done generating");
		}
	}
	
	/**
	 * Sends this activity back to AMazeActivity.
	 */
	public void goBack(View view) {
		Intent intent = new Intent(this, AMazeActivity.class);
		startActivity(intent);
		
	}

	/**
	 * Handles the selection of an item in the spinner. Toasts it and sends it to verbose in LogCat.
	 * Depending on if the controller is manual or not, adjust the manual boolean.
	 */
	@Override
	public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
		parent.getItemAtPosition(position).toString();
		
		Context context = getApplicationContext();
		CharSequence text = parent.getSelectedItem().toString();
		int duration = Toast.LENGTH_SHORT;

		Toast toast = Toast.makeText(context, text, duration);
		toast.show();
		
		Log.v("Spinner Msg", parent.getSelectedItem().toString());
		
		//modify boolean that tells Play Activity if the operation is manual or not
		if(parent.getSelectedItem().toString().equalsIgnoreCase("manual")!=true){
			manual = false;
		}else{
			manual = true;
		}
		
	}

	/**
	 * Handles the selection of an nothing when using the spinner. Sends it to verbose in LogCat.
	 */
	@Override
	public void onNothingSelected(AdapterView<?> parent) {
		Log.v("Spinner Msg", "nothing selected");	
	}
	
	/**
	 * Handles the clicking of a checkbox. Sends it to verbose in LogCat.
	 */
	public void onCheckboxClicked(View view) {
	    // Is the view now checked?
	    boolean checked = ((CheckBox) view).isChecked();
	    
	    // Check which checkbox was clicked
	    switch(view.getId()) {
	        case R.id.checkBox1:
	            if (checked){
	            	map = true;
	            	Log.v("CheckBox Msg", "Maps: true");
	            }
	            else{
	            	map = false;
	            	Log.v("CheckBox Msg", "Maps: false");
	            }
	            break;
	        case R.id.CheckBox01:
	        	if (checked){
	            	walls = true;
	            	Log.v("CheckBox Msg", "Walls: true");
	            }
	            else{
	            	walls = false;
	            	Log.v("CheckBox Msg", "Walls: false");
	            }
	            break;
	        case R.id.CheckBox02:
	        	if (checked){
	            	solution = true;
	            	Log.v("CheckBox Msg", "Sol: true");
	            }
	            else{
	            	solution = false;
	            	Log.v("CheckBox Msg", "Sol: false");
	            }
	            break;
	    }
	}
	
	private void setHandler(){
		maze.setHandler(genHandler);
		Log.v("Handler", "Handler Set");
	}
}
